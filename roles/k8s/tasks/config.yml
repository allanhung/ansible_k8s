- name: generate k8s config set-cluster
  shell: kubectl config set-cluster kubernetes \
    --certificate-authority={{ pillar.ca_common.cert_dir }}/k8s_ca.pem \
    --embed-certs=true \
    --server=https://{{ pillar.k8s_comp.api_server.vip }}:{{ pillar.k8s_comp.api_server.vip_port }} \
    --kubeconfig={{ pillar.k8s_common.conf_dir }}/{{ item }}.conf
  when: inventory_hostname == (pillar.k8s_host.master[0]) and (item in ["controller_manager", "scheduler", "admin"])
  loop: "{{ pillar.ca.keys() }}"
  
- name: generate k8s config set-credentials
  shell: kubectl config set-credentials {{ pillar['ca'][item]['Common_Name'] }} \
    --client-certificate={{ pillar.ca_common.cert_dir }}/{{ item }}.pem \
    --client-key={{ pillar.ca_common.cert_dir }}/{{ item }}-key.pem \
    --embed-certs=true \
    --kubeconfig={{ pillar.k8s_common.conf_dir }}/{{ item }}.conf
  when: inventory_hostname == (pillar.k8s_host.master[0]) and (item in ["controller_manager", "scheduler", "admin"])
  loop: "{{ pillar.ca.keys() }}"

- name: generate k8s config set-context
  shell: kubectl config set-context {{ pillar['ca'][item]['Common_Name'] }}@kubernetes \
    --cluster=kubernetes \
    --user={{ pillar['ca'][item]['Common_Name'] }} \
    --kubeconfig={{ pillar.k8s_common.conf_dir }}/{{ item }}.conf
  when: inventory_hostname == (pillar.k8s_host.master[0]) and (item in ["controller_manager", "scheduler", "admin"])
  loop: "{{ pillar.ca.keys() }}"

- name: generate k8s config use-context
  shell: kubectl config use-context {{ pillar['ca'][item]['Common_Name'] }}@kubernetes \
    --kubeconfig={{ pillar.k8s_common.conf_dir }}/{{ item }}.conf
  when: inventory_hostname == (pillar.k8s_host.master[0]) and (item in ["controller_manager", "scheduler", "admin"])
  loop: "{{ pillar.ca.keys() }}"

# dashboard ssl cert
- name: create secerts for dashboard
  shell: kubectl --kubeconfig={{ pillar.k8s_common.conf_dir }}/admin.conf -n kube-system \
    create secret tls {{ pillar.k8s_addon.dashboard.secerts }} \
    --key {{ pillar.ca_common.cert_dir }}/dashboard-key.pem \
    --cert {{ pillar.ca_common.cert_dir }}/dashboard.pem
  when: inventory_hostname == (pillar.k8s_host.master[0])

# kubelet config
- name: generate kubelet config set-cluster
  shell: kubectl config set-cluster kubernetes \
    --certificate-authority={{ pillar.ca_common.cert_dir }}/k8s_ca.pem \
    --embed-certs=true \
    --server=https://{{ pillar.k8s_comp.api_server.vip }}:{{ pillar.k8s_comp.api_server.vip_port }} \
    --kubeconfig={{ pillar.k8s_common.conf_dir }}/kubelet-{{ inventory_hostname }}.conf
  delegate_to: "{{ pillar.k8s_host.master[0] }}"
  when: inventory_hostname in (pillar.k8s_host.master)
  
- name: generate kubelet config set-credentials
  shell: kubectl config set-credentials {{ pillar['ca']['kubelet']['Common_Name'] }}:{{ inventory_hostname }} \
    --client-certificate={{ pillar.ca_common.cert_dir }}/kubelet-{{ inventory_hostname }}.pem \
    --client-key={{ pillar.ca_common.cert_dir }}/kubelet-{{ inventory_hostname }}-key.pem \
    --embed-certs=true \
    --kubeconfig={{ pillar.k8s_common.conf_dir }}/kubelet-{{ inventory_hostname }}.conf
  delegate_to: "{{ pillar.k8s_host.master[0] }}"
  when: inventory_hostname in (pillar.k8s_host.master)

- name: generate kubelet config set-context
  shell: kubectl config set-context {{ pillar['ca']['kubelet']['Common_Name'] }}:{{ inventory_hostname }}@kubernetes \
    --cluster=kubernetes \
    --user={{ pillar['ca']['kubelet']['Common_Name'] }}:{{ inventory_hostname }} \
    --kubeconfig={{ pillar.k8s_common.conf_dir }}/kubelet-{{ inventory_hostname }}.conf
  delegate_to: "{{ pillar.k8s_host.master[0] }}"
  when: inventory_hostname in (pillar.k8s_host.master)

- name: generate kubelet config use-context
  shell: kubectl config use-context {{ pillar['ca']['kubelet']['Common_Name'] }}:{{ inventory_hostname }}@kubernetes \
    --kubeconfig={{ pillar.k8s_common.conf_dir }}/kubelet-{{ inventory_hostname }}.conf
  delegate_to: "{{ pillar.k8s_host.master[0] }}"
  when: inventory_hostname in (pillar.k8s_host.master)

# bootstrap kubelet config
- name: generate kubelet tls-bootstrap config set-cluster
  shell: kubectl config set-cluster kubernetes \
    --certificate-authority={{ pillar.ca_common.cert_dir }}/k8s_ca.pem \
    --embed-certs=true \
    --server=https://{{ pillar.k8s_comp.api_server.vip }}:{{ pillar.k8s_comp.api_server.vip_port }} \
    --kubeconfig={{ pillar.k8s_common.conf_dir }}/bootstrap-kubelet.conf
  when: inventory_hostname in (pillar.k8s_host.master[0])
  
- name: generate kubelet config set-credentials
  shell: kubectl config set-credentials {{ pillar.tls_bootstrap.user }} \
    --token={{ pillar.tls_bootstrap.token_id }}.{{ pillar.tls_bootstrap.token_secret }}
    --kubeconfig={{ pillar.k8s_common.conf_dir }}/bootstrap-kubelet.conf
  when: inventory_hostname in (pillar.k8s_host.master[0])

- name: generate kubelet config set-context
  shell: kubectl config set-context {{ pillar.tls_bootstrap.user }}@kubernetes \
    --cluster=kubernetes \
    --user={{ pillar.tls_bootstrap.user }} \
    --kubeconfig={{ pillar.k8s_common.conf_dir }}/bootstrap-kubelet.conf
  when: inventory_hostname in (pillar.k8s_host.master[0])

- name: generate kubelet config use-context
  shell: kubectl config use-context {{ pillar.tls_bootstrap.user }}@kubernetes \
    --kubeconfig={{ pillar.k8s_common.conf_dir }}/bootstrap-kubelet.conf
  when: inventory_hostname in (pillar.k8s_host.master[0])
